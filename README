A gem to support physical quantities and unit conversions
Licensed under the MIT license (See COPYING file for details)
Author: Andrew Berkeley (andrew.berkeley.is@googlemail.com)
Homepage: https://github.com/spatchcock/quantify

There are several ways to initialize a quantity object

  mass = Quantity.new(100,:lb)          => <Quantify::Quantity:0xb7332bbc ... >
  mass = Quantity.new(100,'pound')      => <Quantify::Quantity:0xb7332bbc ... >
  mass = 100.lb                         => <Quantify::Quantity:0xb7332bbc ... >
  mass = 100.pound                      => <Quantify::Quantity:0xb7332bbc ... >
  mass = Quantity.parse "100 lb"        => <Quantify::Quantity:0xb7332bbc ... >
  mass = "100 lb".to_q                  => <Quantify::Quantity:0xb7332bbc ... >

Quantity object attributes

  mass.value                            => 100.0
  mass.unit                             => <Quantify::Unit::NonSI:0xb7332b08 ... >
  mass.unit.name                        => "pound"
  mass.unit.symbol                      => "lb"

  # unique identifier, follows JScience
  mass.unit.label                       => "lb"
  mass.unit.pluralized_name             => "pounds"
  mass.to_s                             => "100 lb"
  mass.to_s(:name)                      => "100 pounds"

  # Describe the physical quantity represented by the quantity
  mass.represents                       => "mass"

Convert a quantity to a different unit

  energy = 100.kWh                      => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s(:name)                    => "100 kilowatt hours"

  energy = quantity.to_megajoules       => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s                           => "360.0 MJ"

  energy = quantity.to_MJ               => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s                           => "360.0 MJ"

  energy = quantity.to(:MJ)             => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s                           => "360.0 MJ"

  # Initialize a unit object and pass as conversion argument
  unit = Unit.MJ                        => <Quantify::Unit::SI:0xb75c9718 ... >
  energy = quantity.to(unit)            => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s                           => "360.0 MJ"

  # Single line conversion of litres to barrels, returning only the value
  5000.L.to_bbl.value                   => 31.4490528488754

Convert the units of a quantity with a compound unit

  speed = 70.mi/1.h                     => <Quantify::Quantity:0xb7332bbc ... >
  speed.to_s                            => "70.0 mi h^-1"

  speed_in_kms = speed.to_km            => <Quantify::Quantity:0xb7332bbc ... >
  speed_in_kms.to_s                     => "112.65408 km h^-1"

  speed_in_mins = speed_in_kms.to_min   => <Quantify::Quantity:0xb7332bbc ... >
  speed_in_mins.to_s                    => "1.877568 km min^-1"

Convert a quantity to the corresponding SI unit

  energy = 100.kWh                      => <Quantify::Quantity:0xb7332bbc ... >
  energy.to_s                           => "100 kWh"
  si = quantity.to_si                   => <Quantify::Quantity:0x4j4j9sbc ... >
  si.to_s                               => "360000000.0 J"

Operate on a quantity

  mass = 10.kg * 3                      => <Quantify::Quantity:0xb7332bbc ... >
  mass.to_s                             => 30.0 kg

  distance = 100.light_years / 20       => <Quantify::Quantity:0xb7332bbc ... >
  distance.to_s                         => 5.0 ly

  area = 10.m * 10.m                    => <Quantify::Quantity:0xb7332bbc ... >
  area.to_s :name                       => 100.0 square metres

  speed = 250.mi / 3.h                  => <Quantify::Quantity:0xb7332bbc ... >
  speed.to_s(:name)                     => 83.3333333333333 miles per hour

  speed = 70.mi/1.h                     => <Quantify::Quantity:0xb7332bbc ... >
  time = 0.5.h                          => <Quantify::Quantity:3xf3472hjc ... >
  distance = speed * time               => <Quantify::Quantity:7d7f8g9d5g ... >
  distance.to_s                         => 35.0 mi

Additional operations
The result of quantity operations is commonly a new quantity with a compound unit.
Unless the result is equivalent to one of the base SI units (m, kg, s, K, etc.) or
one of the following, square metre, cubic metre, joule, watt, newton or pascal, then
the compound unit represents appropriate combination of the units involved, albeit
with any like-units within the numerator and denominator grouped under a single
power/index.

Units are not automatically cancelled or rationalized (made consistent). This is
because it cannot be assumed that that is the desire of the user. For example, a
quantity with units <mass> per <mass> is technically dimensionless, but the user
might prefer to explicitly represent the units rather than reduce to a dimensionless
quantity. In addition, this quantity might be expressed in terms of grams per tonne,
and the user may not necessarily prefer a conversion into consistent mass units
(e.g. g/g or t/t). Therefore, the following methods are available...

  # Where units representing the same physical quantity appear together, they can
  # made consistent by simply converting to the unit which is desired
  area = 12.yd * 36.ft                  => <Quantify::Quantity:0xb7332bbc ... >
  area.to_s                             => "432.0 yd ft"
  area.to_yd
  area.to_s                             => "144.0 yd^2"

  # Alternatively, all units within the numerator and denominator respectively
  # can be standardized.
  quantity = (12.ft*8.mi)/(1.s*8.min)
  quantity.to_s                         => 12.0 ft mi s^-1 min^-1
  quantity.rationalize_units!
  quantity.to_s                         => 1056.0 ft^2 s^-2

  # A quantity with arbitrary cancelable units can be cancelled manually
  quantity = (12.m**6) / 2.m**2
  quantity.to_s                         => "746496.0 m^6 m^-2"
  quantity.cancel_base_units! :m
  quantity.to_s                         => "746496.0 m^4"

Note: there are more comprehensive and flexible methods for manupulating compound
units available as part of of the class Unit::Compound. These can be used to
convert a conpound unit into the precise form required. If such an approach is
used, any quantity object can be converted to the new form by simply passing the
new unit object into the Quantity#to method.

Initialize a unit object

  unit = Unit.for :km                    => <Quantify::Unit::SI:0xb75c9718 ... >
  unit = Unit.km                         => <Quantify::Unit::SI:0xb75c9718 ... >
  unit = Unit.kilometre                  => <Quantify::Unit::SI:0xb75c9718 ... >
  
  unit.name                              => 'kilometre'
  unit.symbol                            => 'kg'
  unit.label                             => 'kg'
  unit.dimensions                        => <Quantify::Dimensions:0xb75c4254 .. >
  unit.measures                          => 'length'
  unit.alternatives :name                => ['metre','megametre','gigametre',
                                             'terametre','angstrom','astronomical unit',
                                             'baromil','chain','dram','ell','fathom',
                                             'fermi','foot us survey','foot','furlong',
                                             'hand','inch','nautical league',
                                             'statute league','light year', 'line','link',
                                             'yard']

  other_unit = Unit.hour
  other_unit.name                        => 'hour'
  other_unit.symbol                      => 'h'
  other_unit.measures                    => 'time'
  other_unit.alternatives :symbol        => [ 's', 'ks', 'Ms', 'Gs', 'Ts', 'd', 'min' ]

  another_unit = unit / other_unit       => <Quantify::Unit::Compound:0xb74af323 ... >
  another_unit.name                      => 'kilometer per hour'
  another_unit.symbol                    => 'km h^-1'
  another_unit.measures                  => 'velocity'
  another_unit.base_units.map(&:name)    => ['kilogram','hour']

  last_unit = Unit.m
  last.unit.measures                     => 'length'
  square = last_unit ** 2                => <Quantify::Unit::Compound:0xb446f12f ... >
  square.symbol                          => 'm^2'
  square.measures                        => 'area'
